#ifndef TPGLOGIC_H
#define TPGLOGIC_H

/// @file TpgLogic.h
/// @brief TpgLogic のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2016, 2018, 2022 Yusuke Matsunaga
/// All rights reserved.

#include "TpgNode.h"


BEGIN_NAMESPACE_DRUID

//////////////////////////////////////////////////////////////////////
/// @class TpgLogic TpgLogic.h "TpgLogic.h"
/// @brief 論理ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class TpgLogic :
  public TpgNode
{
protected:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  TpgLogic(
    const vector<const TpgNode*>& fanin_list, ///< [in] ファンインリスト
    SizeType fanout_num ///< [in] ファンアウト数
  );

  /// @brief デストラクタ
  ~TpgLogic() = default;


public:
  //////////////////////////////////////////////////////////////////////
  // 構造情報を得る関数
  //////////////////////////////////////////////////////////////////////

  /// @brief logic タイプの時 true を返す．
  bool
  is_logic() const override;

};


//////////////////////////////////////////////////////////////////////
/// @class TpgLogic TpgLogic.h "TpgLogic.h"
/// @brief 0入力の論理ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class TpgLogic0 :
  public TpgLogic
{
protected:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  TpgLogic0(
    SizeType fanout_num ///< [in] ファンアウト数
  );

  /// @brief デストラクタ
  ~TpgLogic0() = default;

};


//////////////////////////////////////////////////////////////////////
/// @class TpgLogic TpgLogic.h "TpgLogic.h"
/// @brief 1入力の論理ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class TpgLogic1 :
  public TpgLogic
{
protected:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  TpgLogic1(
    const TpgNode* fanin, ///< [in] ファンイン
    SizeType fanout_num   ///< [in] ファンアウト数
  );

  /// @brief デストラクタ
  ~TpgLogic1() = default;

};

#if 0
//////////////////////////////////////////////////////////////////////
/// @class TpgLogic TpgLogic.h "TpgLogic.h"
/// @brief 2入力の論理ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class TpgLogic2 :
  public TpgLogic
{
protected:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  ///
  /// fanin_list.size() == 2 であることを仮定している．
  TpgLogic2(
    const vector<TpgNode*>& fanin_list ///< [in] ファンインのリスト
  );

  /// @brief デストラクタ
  ~TpgLogic2() = default;

};


//////////////////////////////////////////////////////////////////////
/// @class TpgLogic TpgLogic.h "TpgLogic.h"
/// @brief 3入力の論理ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class TpgLogic3 :
  public TpgLogic
{
protected:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  ///
  /// fanin_list.size() == 3 であることを仮定している．
  TpgLogic3(
    const vector<TpgNode*>& fanin_list ///< [in] ファンインのリスト
  );

  /// @brief デストラクタ
  ~TpgLogic3() = default;

};


//////////////////////////////////////////////////////////////////////
/// @class TpgLogic TpgLogic.h "TpgLogic.h"
/// @brief 4入力の論理ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class TpgLogic4 :
  public TpgLogic
{
protected:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  ///
  /// fanin_list.size() == 4 であることを仮定している．
  TpgLogic4(
    const vector<TpgNode*>& fanin_list ///< [in] ファンインのリスト
  );

  /// @brief デストラクタ
  ~TpgLogic4() = default;

};


//////////////////////////////////////////////////////////////////////
/// @class TpgLogic TpgLogic.h "TpgLogic.h"
/// @brief n入力の論理ノードを表すクラス
//////////////////////////////////////////////////////////////////////
class TpgLogicN :
  public TpgLogic
{
protected:
  //////////////////////////////////////////////////////////////////////
  // コンストラクタ/デストラクタ
  //////////////////////////////////////////////////////////////////////

  /// @brief コンストラクタ
  TpgLogicN(
    const vector<TpgNode*>& fanin_list ///< [in] ファンインのリスト
  );

  /// @brief デストラクタ
  ~TpgLogicN() = default;

};
#endif

END_NAMESPACE_DRUID

#endif // TPGLOGIC_H
