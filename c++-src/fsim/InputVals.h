#ifndef INPUTVALS_H
#define INPUTVALS_H

/// @file InputVals.h
/// @brief InputVals のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2017 Yusuke Matsunaga
/// All rights reserved.


#include "fsim_nsdef.h"


BEGIN_NAMESPACE_SATPG_FSIM

//////////////////////////////////////////////////////////////////////
/// @class InputVals InputVals.h "InputVals.h"
/// @brief シミュレーションの入力パタンを表すクラス
///
/// 実際には TestVector と NodeValList の２通りがあるので仮想関数で
/// 抽象化する．
//////////////////////////////////////////////////////////////////////
class InputVals
{
public:

  /// @brief デストラクタ
  virtual
  ~InputVals() { }


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 値を設定する．(縮退故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val(FSIM_CLASSNAME& fsim) const = 0;

  /// @brief 1時刻目の値を設定する．(遷移故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val1(FSIM_CLASSNAME& fsim) const = 0;

  /// @brief 2時刻目の値を設定する．(遷移故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val2(FSIM_CLASSNAME& fsim) const = 0;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

};


//////////////////////////////////////////////////////////////////////
/// @class TvInputVals InputVals.h "InputVals.h"
/// @brief TestVector を用いた InputVals の実装
//////////////////////////////////////////////////////////////////////
class TvInputVals :
  public InputVals
{
public:

  /// @brief コンストラクタ
  /// @param[in] testvector テストベクタ
  TvInputVals(const TestVector& testvector);

  /// @brief デストラクタ
  virtual
  ~TvInputVals();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 値を設定する．(縮退故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val(FSIM_CLASSNAME& fsim) const;

  /// @brief 1時刻目の値を設定する．(遷移故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val1(FSIM_CLASSNAME& fsim) const;

  /// @brief 2時刻目の値を設定する．(遷移故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val2(FSIM_CLASSNAME& fsim) const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // テストベクタ
  const TestVector& mTestVector;

};


//////////////////////////////////////////////////////////////////////
/// @class Tv2InputVals InputVals.h "InputVals.h"
/// @brief 複数の TestVector を用いた InputVals の実装
//////////////////////////////////////////////////////////////////////
class Tv2InputVals :
  public InputVals
{
public:

  /// @brief コンストラクタ
  /// @param[in] pat_map パタンのセットされているビットに1を立てたビットマップ
  /// @param[in] pat_array パタンの配列(サイズは kPvBitLen の固定長)
  Tv2InputVals(PackedVal pat_map,
	       TestVector pat_array[]);

  /// @brief デストラクタ
  virtual
  ~Tv2InputVals();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 値を設定する．(縮退故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val(FSIM_CLASSNAME& fsim) const;

  /// @brief 1時刻目の値を設定する．(遷移故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val1(FSIM_CLASSNAME& fsim) const;

  /// @brief 2時刻目の値を設定する．(遷移故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val2(FSIM_CLASSNAME& fsim) const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // セットされているパタンを表すビットマップ
  PackedVal mPatMap;

  // mPatMap の最初の1のビット位置
  // 全て０の場合には kPvBitLen が入る．
  int mPatFirstBit;

  // テストベクタの配列
  TestVector mPatArray[kPvBitLen];

};


//////////////////////////////////////////////////////////////////////
/// @class NvlInputVals InputVals.h "InputVals.h"
/// @brief NodeValList を用いた InputVals の実装
//////////////////////////////////////////////////////////////////////
class NvlInputVals :
  public InputVals
{
public:

  /// @brief コンストラクタ
  /// @param[in] assign_list 値の割り当てリスト
  NvlInputVals(const NodeValList& assign_list);

  /// @brief デストラクタ
  ~NvlInputVals();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 値を設定する．(縮退故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val(FSIM_CLASSNAME& fsim) const;

  /// @brief 1時刻目の値を設定する．(遷移故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val1(FSIM_CLASSNAME& fsim) const;

  /// @brief 2時刻目の値を設定する．(遷移故障用)
  /// @param[in] fsim 故障シミュレータ
  virtual
  void
  set_val2(FSIM_CLASSNAME& fsim) const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 値の割り当てリスト
  const NodeValList& mAssignList;

};

END_NAMESPACE_SATPG_FSIM

#endif // INPUTVALS_H
